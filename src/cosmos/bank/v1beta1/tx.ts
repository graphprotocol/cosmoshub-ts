// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.7

import { Writer, Reader, Protobuf } from "as-proto";
import { base } from "../../base";
import { Input, Output } from "./bank";

export class MsgSend {
  static encode(message: MsgSend, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.fromAddress);

    writer.uint32(18);
    writer.string(message.toAddress);

    const amount = message.amount;
    for (let i = 0; i < amount.length; ++i) {
      writer.uint32(26);
      writer.fork();
      base.v1beta1.Coin.encode(amount[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgSend {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSend();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.fromAddress = reader.string();
          break;

        case 2:
          message.toAddress = reader.string();
          break;

        case 3:
          message.amount.push(
            base.v1beta1.Coin.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  fromAddress: string;
  toAddress: string;
  amount: Array<base.v1beta1.Coin>;

  constructor(
    fromAddress: string = "",
    toAddress: string = "",
    amount: Array<base.v1beta1.Coin> = []
  ) {
    this.fromAddress = fromAddress;
    this.toAddress = toAddress;
    this.amount = amount;
  }
}

export function encodeMsgSend(message: MsgSend): Uint8Array {
  return Protobuf.encode(message, MsgSend.encode);
}

export function decodeMsgSend(buffer: Uint8Array): MsgSend {
  return Protobuf.decode<MsgSend>(buffer, MsgSend.decode);
}

@unmanaged
export class MsgSendResponse {
  static encode(message: MsgSendResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgSendResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSendResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgSendResponse(message: MsgSendResponse): Uint8Array {
  return Protobuf.encode(message, MsgSendResponse.encode);
}

export function decodeMsgSendResponse(buffer: Uint8Array): MsgSendResponse {
  return Protobuf.decode<MsgSendResponse>(buffer, MsgSendResponse.decode);
}

export class MsgMultiSend {
  static encode(message: MsgMultiSend, writer: Writer): void {
    const inputs = message.inputs;
    for (let i = 0; i < inputs.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Input.encode(inputs[i], writer);
      writer.ldelim();
    }

    const outputs = message.outputs;
    for (let i = 0; i < outputs.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Output.encode(outputs[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgMultiSend {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgMultiSend();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.inputs.push(Input.decode(reader, reader.uint32()));
          break;

        case 2:
          message.outputs.push(Output.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  inputs: Array<Input>;
  outputs: Array<Output>;

  constructor(inputs: Array<Input> = [], outputs: Array<Output> = []) {
    this.inputs = inputs;
    this.outputs = outputs;
  }
}

export function encodeMsgMultiSend(message: MsgMultiSend): Uint8Array {
  return Protobuf.encode(message, MsgMultiSend.encode);
}

export function decodeMsgMultiSend(buffer: Uint8Array): MsgMultiSend {
  return Protobuf.decode<MsgMultiSend>(buffer, MsgMultiSend.decode);
}

@unmanaged
export class MsgMultiSendResponse {
  static encode(message: MsgMultiSendResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgMultiSendResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgMultiSendResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgMultiSendResponse(
  message: MsgMultiSendResponse
): Uint8Array {
  return Protobuf.encode(message, MsgMultiSendResponse.encode);
}

export function decodeMsgMultiSendResponse(
  buffer: Uint8Array
): MsgMultiSendResponse {
  return Protobuf.decode<MsgMultiSendResponse>(
    buffer,
    MsgMultiSendResponse.decode
  );
}
