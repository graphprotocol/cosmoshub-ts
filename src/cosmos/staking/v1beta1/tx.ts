// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.7

import { Writer, Reader, Protobuf } from "as-proto";
import { Description, CommissionRates } from "./staking";
import { google } from "../../../google";
import { base } from "../../base";

export class MsgCreateValidator {
  static encode(message: MsgCreateValidator, writer: Writer): void {
    const description = message.description;
    if (description !== null) {
      writer.uint32(10);
      writer.fork();
      Description.encode(description, writer);
      writer.ldelim();
    }

    const commission = message.commission;
    if (commission !== null) {
      writer.uint32(18);
      writer.fork();
      CommissionRates.encode(commission, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.minSelfDelegation);

    writer.uint32(34);
    writer.string(message.delegatorAddress);

    writer.uint32(42);
    writer.string(message.validatorAddress);

    const pubkey = message.pubkey;
    if (pubkey !== null) {
      writer.uint32(50);
      writer.fork();
      google.protobuf.Any.encode(pubkey, writer);
      writer.ldelim();
    }

    const value = message.value;
    if (value !== null) {
      writer.uint32(58);
      writer.fork();
      base.v1beta1.Coin.encode(value, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgCreateValidator {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgCreateValidator();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.description = Description.decode(reader, reader.uint32());
          break;

        case 2:
          message.commission = CommissionRates.decode(reader, reader.uint32());
          break;

        case 3:
          message.minSelfDelegation = reader.string();
          break;

        case 4:
          message.delegatorAddress = reader.string();
          break;

        case 5:
          message.validatorAddress = reader.string();
          break;

        case 6:
          message.pubkey = google.protobuf.Any.decode(reader, reader.uint32());
          break;

        case 7:
          message.value = base.v1beta1.Coin.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  description: Description | null;
  commission: CommissionRates | null;
  minSelfDelegation: string;
  delegatorAddress: string;
  validatorAddress: string;
  pubkey: google.protobuf.Any | null;
  value: base.v1beta1.Coin | null;

  constructor(
    description: Description | null = null,
    commission: CommissionRates | null = null,
    minSelfDelegation: string = "",
    delegatorAddress: string = "",
    validatorAddress: string = "",
    pubkey: google.protobuf.Any | null = null,
    value: base.v1beta1.Coin | null = null
  ) {
    this.description = description;
    this.commission = commission;
    this.minSelfDelegation = minSelfDelegation;
    this.delegatorAddress = delegatorAddress;
    this.validatorAddress = validatorAddress;
    this.pubkey = pubkey;
    this.value = value;
  }
}

export function encodeMsgCreateValidator(
  message: MsgCreateValidator
): Uint8Array {
  return Protobuf.encode(message, MsgCreateValidator.encode);
}

export function decodeMsgCreateValidator(
  buffer: Uint8Array
): MsgCreateValidator {
  return Protobuf.decode<MsgCreateValidator>(buffer, MsgCreateValidator.decode);
}

@unmanaged
export class MsgCreateValidatorResponse {
  static encode(message: MsgCreateValidatorResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgCreateValidatorResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgCreateValidatorResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgCreateValidatorResponse(
  message: MsgCreateValidatorResponse
): Uint8Array {
  return Protobuf.encode(message, MsgCreateValidatorResponse.encode);
}

export function decodeMsgCreateValidatorResponse(
  buffer: Uint8Array
): MsgCreateValidatorResponse {
  return Protobuf.decode<MsgCreateValidatorResponse>(
    buffer,
    MsgCreateValidatorResponse.decode
  );
}

export class MsgEditValidator {
  static encode(message: MsgEditValidator, writer: Writer): void {
    const description = message.description;
    if (description !== null) {
      writer.uint32(10);
      writer.fork();
      Description.encode(description, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.validatorAddress);

    writer.uint32(26);
    writer.string(message.commissionRate);

    writer.uint32(34);
    writer.string(message.minSelfDelegation);
  }

  static decode(reader: Reader, length: i32): MsgEditValidator {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgEditValidator();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.description = Description.decode(reader, reader.uint32());
          break;

        case 2:
          message.validatorAddress = reader.string();
          break;

        case 3:
          message.commissionRate = reader.string();
          break;

        case 4:
          message.minSelfDelegation = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  description: Description | null;
  validatorAddress: string;
  commissionRate: string;
  minSelfDelegation: string;

  constructor(
    description: Description | null = null,
    validatorAddress: string = "",
    commissionRate: string = "",
    minSelfDelegation: string = ""
  ) {
    this.description = description;
    this.validatorAddress = validatorAddress;
    this.commissionRate = commissionRate;
    this.minSelfDelegation = minSelfDelegation;
  }
}

export function encodeMsgEditValidator(message: MsgEditValidator): Uint8Array {
  return Protobuf.encode(message, MsgEditValidator.encode);
}

export function decodeMsgEditValidator(buffer: Uint8Array): MsgEditValidator {
  return Protobuf.decode<MsgEditValidator>(buffer, MsgEditValidator.decode);
}

@unmanaged
export class MsgEditValidatorResponse {
  static encode(message: MsgEditValidatorResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgEditValidatorResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgEditValidatorResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgEditValidatorResponse(
  message: MsgEditValidatorResponse
): Uint8Array {
  return Protobuf.encode(message, MsgEditValidatorResponse.encode);
}

export function decodeMsgEditValidatorResponse(
  buffer: Uint8Array
): MsgEditValidatorResponse {
  return Protobuf.decode<MsgEditValidatorResponse>(
    buffer,
    MsgEditValidatorResponse.decode
  );
}

export class MsgDelegate {
  static encode(message: MsgDelegate, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.delegatorAddress);

    writer.uint32(18);
    writer.string(message.validatorAddress);

    const amount = message.amount;
    if (amount !== null) {
      writer.uint32(26);
      writer.fork();
      base.v1beta1.Coin.encode(amount, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgDelegate {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgDelegate();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.delegatorAddress = reader.string();
          break;

        case 2:
          message.validatorAddress = reader.string();
          break;

        case 3:
          message.amount = base.v1beta1.Coin.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  delegatorAddress: string;
  validatorAddress: string;
  amount: base.v1beta1.Coin | null;

  constructor(
    delegatorAddress: string = "",
    validatorAddress: string = "",
    amount: base.v1beta1.Coin | null = null
  ) {
    this.delegatorAddress = delegatorAddress;
    this.validatorAddress = validatorAddress;
    this.amount = amount;
  }
}

export function encodeMsgDelegate(message: MsgDelegate): Uint8Array {
  return Protobuf.encode(message, MsgDelegate.encode);
}

export function decodeMsgDelegate(buffer: Uint8Array): MsgDelegate {
  return Protobuf.decode<MsgDelegate>(buffer, MsgDelegate.decode);
}

@unmanaged
export class MsgDelegateResponse {
  static encode(message: MsgDelegateResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgDelegateResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgDelegateResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgDelegateResponse(
  message: MsgDelegateResponse
): Uint8Array {
  return Protobuf.encode(message, MsgDelegateResponse.encode);
}

export function decodeMsgDelegateResponse(
  buffer: Uint8Array
): MsgDelegateResponse {
  return Protobuf.decode<MsgDelegateResponse>(
    buffer,
    MsgDelegateResponse.decode
  );
}

export class MsgBeginRedelegate {
  static encode(message: MsgBeginRedelegate, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.delegatorAddress);

    writer.uint32(18);
    writer.string(message.validatorSrcAddress);

    writer.uint32(26);
    writer.string(message.validatorDstAddress);

    const amount = message.amount;
    if (amount !== null) {
      writer.uint32(34);
      writer.fork();
      base.v1beta1.Coin.encode(amount, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgBeginRedelegate {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgBeginRedelegate();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.delegatorAddress = reader.string();
          break;

        case 2:
          message.validatorSrcAddress = reader.string();
          break;

        case 3:
          message.validatorDstAddress = reader.string();
          break;

        case 4:
          message.amount = base.v1beta1.Coin.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  delegatorAddress: string;
  validatorSrcAddress: string;
  validatorDstAddress: string;
  amount: base.v1beta1.Coin | null;

  constructor(
    delegatorAddress: string = "",
    validatorSrcAddress: string = "",
    validatorDstAddress: string = "",
    amount: base.v1beta1.Coin | null = null
  ) {
    this.delegatorAddress = delegatorAddress;
    this.validatorSrcAddress = validatorSrcAddress;
    this.validatorDstAddress = validatorDstAddress;
    this.amount = amount;
  }
}

export function encodeMsgBeginRedelegate(
  message: MsgBeginRedelegate
): Uint8Array {
  return Protobuf.encode(message, MsgBeginRedelegate.encode);
}

export function decodeMsgBeginRedelegate(
  buffer: Uint8Array
): MsgBeginRedelegate {
  return Protobuf.decode<MsgBeginRedelegate>(buffer, MsgBeginRedelegate.decode);
}

@unmanaged
export class MsgBeginRedelegateResponse {
  static encode(message: MsgBeginRedelegateResponse, writer: Writer): void {
    const completionTime = message.completionTime;
    if (completionTime !== null) {
      writer.uint32(10);
      writer.fork();
      google.protobuf.Timestamp.encode(completionTime, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgBeginRedelegateResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgBeginRedelegateResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.completionTime = google.protobuf.Timestamp.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  completionTime: google.protobuf.Timestamp | null;

  constructor(completionTime: google.protobuf.Timestamp | null = null) {
    this.completionTime = completionTime;
  }
}

export function encodeMsgBeginRedelegateResponse(
  message: MsgBeginRedelegateResponse
): Uint8Array {
  return Protobuf.encode(message, MsgBeginRedelegateResponse.encode);
}

export function decodeMsgBeginRedelegateResponse(
  buffer: Uint8Array
): MsgBeginRedelegateResponse {
  return Protobuf.decode<MsgBeginRedelegateResponse>(
    buffer,
    MsgBeginRedelegateResponse.decode
  );
}

export class MsgUndelegate {
  static encode(message: MsgUndelegate, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.delegatorAddress);

    writer.uint32(18);
    writer.string(message.validatorAddress);

    const amount = message.amount;
    if (amount !== null) {
      writer.uint32(26);
      writer.fork();
      base.v1beta1.Coin.encode(amount, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgUndelegate {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgUndelegate();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.delegatorAddress = reader.string();
          break;

        case 2:
          message.validatorAddress = reader.string();
          break;

        case 3:
          message.amount = base.v1beta1.Coin.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  delegatorAddress: string;
  validatorAddress: string;
  amount: base.v1beta1.Coin | null;

  constructor(
    delegatorAddress: string = "",
    validatorAddress: string = "",
    amount: base.v1beta1.Coin | null = null
  ) {
    this.delegatorAddress = delegatorAddress;
    this.validatorAddress = validatorAddress;
    this.amount = amount;
  }
}

export function encodeMsgUndelegate(message: MsgUndelegate): Uint8Array {
  return Protobuf.encode(message, MsgUndelegate.encode);
}

export function decodeMsgUndelegate(buffer: Uint8Array): MsgUndelegate {
  return Protobuf.decode<MsgUndelegate>(buffer, MsgUndelegate.decode);
}

@unmanaged
export class MsgUndelegateResponse {
  static encode(message: MsgUndelegateResponse, writer: Writer): void {
    const completionTime = message.completionTime;
    if (completionTime !== null) {
      writer.uint32(10);
      writer.fork();
      google.protobuf.Timestamp.encode(completionTime, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgUndelegateResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgUndelegateResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.completionTime = google.protobuf.Timestamp.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  completionTime: google.protobuf.Timestamp | null;

  constructor(completionTime: google.protobuf.Timestamp | null = null) {
    this.completionTime = completionTime;
  }
}

export function encodeMsgUndelegateResponse(
  message: MsgUndelegateResponse
): Uint8Array {
  return Protobuf.encode(message, MsgUndelegateResponse.encode);
}

export function decodeMsgUndelegateResponse(
  buffer: Uint8Array
): MsgUndelegateResponse {
  return Protobuf.decode<MsgUndelegateResponse>(
    buffer,
    MsgUndelegateResponse.decode
  );
}
