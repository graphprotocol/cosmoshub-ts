// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.7

import { Writer, Reader, Protobuf } from "as-proto";

export class Coin {
  static encode(message: Coin, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.denom);

    writer.uint32(18);
    writer.string(message.amount);
  }

  static decode(reader: Reader, length: i32): Coin {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Coin();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;

        case 2:
          message.amount = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  denom: string;
  amount: string;

  constructor(denom: string = "", amount: string = "") {
    this.denom = denom;
    this.amount = amount;
  }
}

export function encodeCoin(message: Coin): Uint8Array {
  return Protobuf.encode(message, Coin.encode);
}

export function decodeCoin(buffer: Uint8Array): Coin {
  return Protobuf.decode<Coin>(buffer, Coin.decode);
}

export class DecCoin {
  static encode(message: DecCoin, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.denom);

    writer.uint32(18);
    writer.string(message.amount);
  }

  static decode(reader: Reader, length: i32): DecCoin {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DecCoin();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.denom = reader.string();
          break;

        case 2:
          message.amount = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  denom: string;
  amount: string;

  constructor(denom: string = "", amount: string = "") {
    this.denom = denom;
    this.amount = amount;
  }
}

export function encodeDecCoin(message: DecCoin): Uint8Array {
  return Protobuf.encode(message, DecCoin.encode);
}

export function decodeDecCoin(buffer: Uint8Array): DecCoin {
  return Protobuf.decode<DecCoin>(buffer, DecCoin.decode);
}

export class IntProto {
  static encode(message: IntProto, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.int);
  }

  static decode(reader: Reader, length: i32): IntProto {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new IntProto();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.int = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  int: string;

  constructor(int: string = "") {
    this.int = int;
  }
}

export function encodeIntProto(message: IntProto): Uint8Array {
  return Protobuf.encode(message, IntProto.encode);
}

export function decodeIntProto(buffer: Uint8Array): IntProto {
  return Protobuf.decode<IntProto>(buffer, IntProto.decode);
}

export class DecProto {
  static encode(message: DecProto, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.dec);
  }

  static decode(reader: Reader, length: i32): DecProto {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DecProto();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.dec = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  dec: string;

  constructor(dec: string = "") {
    this.dec = dec;
  }
}

export function encodeDecProto(message: DecProto): Uint8Array {
  return Protobuf.encode(message, DecProto.encode);
}

export function decodeDecProto(buffer: Uint8Array): DecProto {
  return Protobuf.decode<DecProto>(buffer, DecProto.decode);
}
