// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.6

import { Writer, Reader, Protobuf } from "as-proto";
import { Grant } from "./authz";
import { google } from "../../../google";

export class MsgGrant {
  static encode(message: MsgGrant, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.granter);

    writer.uint32(18);
    writer.string(message.grantee);

    const grant = message.grant;
    if (grant !== null) {
      writer.uint32(26);
      writer.fork();
      Grant.encode(grant, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgGrant {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgGrant();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.granter = reader.string();
          break;

        case 2:
          message.grantee = reader.string();
          break;

        case 3:
          message.grant = Grant.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  granter: string;
  grantee: string;
  grant: Grant | null;

  constructor(
    granter: string = "",
    grantee: string = "",
    grant: Grant | null = null
  ) {
    this.granter = granter;
    this.grantee = grantee;
    this.grant = grant;
  }
}

export function encodeMsgGrant(message: MsgGrant): Uint8Array {
  return Protobuf.encode(message, MsgGrant.encode);
}

export function decodeMsgGrant(buffer: Uint8Array): MsgGrant {
  return Protobuf.decode<MsgGrant>(buffer, MsgGrant.decode);
}

export class MsgExecResponse {
  static encode(message: MsgExecResponse, writer: Writer): void {
    const results = message.results;
    if (results.length !== 0) {
      for (let i = 0; i < results.length; ++i) {
        writer.uint32(10);
        writer.bytes(results[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): MsgExecResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgExecResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.results.push(reader.bytes());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  results: Array<Uint8Array>;

  constructor(results: Array<Uint8Array> = []) {
    this.results = results;
  }
}

export function encodeMsgExecResponse(message: MsgExecResponse): Uint8Array {
  return Protobuf.encode(message, MsgExecResponse.encode);
}

export function decodeMsgExecResponse(buffer: Uint8Array): MsgExecResponse {
  return Protobuf.decode<MsgExecResponse>(buffer, MsgExecResponse.decode);
}

export class MsgExec {
  static encode(message: MsgExec, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.grantee);

    const msgs = message.msgs;
    for (let i = 0; i < msgs.length; ++i) {
      writer.uint32(18);
      writer.fork();
      google.protobuf.Any.encode(msgs[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgExec {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgExec();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.grantee = reader.string();
          break;

        case 2:
          message.msgs.push(
            google.protobuf.Any.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  grantee: string;
  msgs: Array<google.protobuf.Any>;

  constructor(grantee: string = "", msgs: Array<google.protobuf.Any> = []) {
    this.grantee = grantee;
    this.msgs = msgs;
  }
}

export function encodeMsgExec(message: MsgExec): Uint8Array {
  return Protobuf.encode(message, MsgExec.encode);
}

export function decodeMsgExec(buffer: Uint8Array): MsgExec {
  return Protobuf.decode<MsgExec>(buffer, MsgExec.decode);
}

@unmanaged
export class MsgGrantResponse {
  static encode(message: MsgGrantResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgGrantResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgGrantResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgGrantResponse(message: MsgGrantResponse): Uint8Array {
  return Protobuf.encode(message, MsgGrantResponse.encode);
}

export function decodeMsgGrantResponse(buffer: Uint8Array): MsgGrantResponse {
  return Protobuf.decode<MsgGrantResponse>(buffer, MsgGrantResponse.decode);
}

export class MsgRevoke {
  static encode(message: MsgRevoke, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.granter);

    writer.uint32(18);
    writer.string(message.grantee);

    writer.uint32(26);
    writer.string(message.msgTypeUrl);
  }

  static decode(reader: Reader, length: i32): MsgRevoke {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgRevoke();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.granter = reader.string();
          break;

        case 2:
          message.grantee = reader.string();
          break;

        case 3:
          message.msgTypeUrl = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  granter: string;
  grantee: string;
  msgTypeUrl: string;

  constructor(
    granter: string = "",
    grantee: string = "",
    msgTypeUrl: string = ""
  ) {
    this.granter = granter;
    this.grantee = grantee;
    this.msgTypeUrl = msgTypeUrl;
  }
}

export function encodeMsgRevoke(message: MsgRevoke): Uint8Array {
  return Protobuf.encode(message, MsgRevoke.encode);
}

export function decodeMsgRevoke(buffer: Uint8Array): MsgRevoke {
  return Protobuf.decode<MsgRevoke>(buffer, MsgRevoke.decode);
}

@unmanaged
export class MsgRevokeResponse {
  static encode(message: MsgRevokeResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgRevokeResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgRevokeResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgRevokeResponse(
  message: MsgRevokeResponse
): Uint8Array {
  return Protobuf.encode(message, MsgRevokeResponse.encode);
}

export function decodeMsgRevokeResponse(buffer: Uint8Array): MsgRevokeResponse {
  return Protobuf.decode<MsgRevokeResponse>(buffer, MsgRevokeResponse.decode);
}
