// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.6

import { Writer, Reader, Protobuf } from "as-proto";
import { base } from "../../base";

export class MsgSetWithdrawAddress {
  static encode(message: MsgSetWithdrawAddress, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.delegatorAddress);

    writer.uint32(18);
    writer.string(message.withdrawAddress);
  }

  static decode(reader: Reader, length: i32): MsgSetWithdrawAddress {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSetWithdrawAddress();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.delegatorAddress = reader.string();
          break;

        case 2:
          message.withdrawAddress = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  delegatorAddress: string;
  withdrawAddress: string;

  constructor(delegatorAddress: string = "", withdrawAddress: string = "") {
    this.delegatorAddress = delegatorAddress;
    this.withdrawAddress = withdrawAddress;
  }
}

export function encodeMsgSetWithdrawAddress(
  message: MsgSetWithdrawAddress
): Uint8Array {
  return Protobuf.encode(message, MsgSetWithdrawAddress.encode);
}

export function decodeMsgSetWithdrawAddress(
  buffer: Uint8Array
): MsgSetWithdrawAddress {
  return Protobuf.decode<MsgSetWithdrawAddress>(
    buffer,
    MsgSetWithdrawAddress.decode
  );
}

@unmanaged
export class MsgSetWithdrawAddressResponse {
  static encode(message: MsgSetWithdrawAddressResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgSetWithdrawAddressResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSetWithdrawAddressResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgSetWithdrawAddressResponse(
  message: MsgSetWithdrawAddressResponse
): Uint8Array {
  return Protobuf.encode(message, MsgSetWithdrawAddressResponse.encode);
}

export function decodeMsgSetWithdrawAddressResponse(
  buffer: Uint8Array
): MsgSetWithdrawAddressResponse {
  return Protobuf.decode<MsgSetWithdrawAddressResponse>(
    buffer,
    MsgSetWithdrawAddressResponse.decode
  );
}

export class MsgWithdrawDelegatorReward {
  static encode(message: MsgWithdrawDelegatorReward, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.delegatorAddress);

    writer.uint32(18);
    writer.string(message.validatorAddress);
  }

  static decode(reader: Reader, length: i32): MsgWithdrawDelegatorReward {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgWithdrawDelegatorReward();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.delegatorAddress = reader.string();
          break;

        case 2:
          message.validatorAddress = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  delegatorAddress: string;
  validatorAddress: string;

  constructor(delegatorAddress: string = "", validatorAddress: string = "") {
    this.delegatorAddress = delegatorAddress;
    this.validatorAddress = validatorAddress;
  }
}

export function encodeMsgWithdrawDelegatorReward(
  message: MsgWithdrawDelegatorReward
): Uint8Array {
  return Protobuf.encode(message, MsgWithdrawDelegatorReward.encode);
}

export function decodeMsgWithdrawDelegatorReward(
  buffer: Uint8Array
): MsgWithdrawDelegatorReward {
  return Protobuf.decode<MsgWithdrawDelegatorReward>(
    buffer,
    MsgWithdrawDelegatorReward.decode
  );
}

@unmanaged
export class MsgWithdrawDelegatorRewardResponse {
  static encode(
    message: MsgWithdrawDelegatorRewardResponse,
    writer: Writer
  ): void {}

  static decode(
    reader: Reader,
    length: i32
  ): MsgWithdrawDelegatorRewardResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgWithdrawDelegatorRewardResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgWithdrawDelegatorRewardResponse(
  message: MsgWithdrawDelegatorRewardResponse
): Uint8Array {
  return Protobuf.encode(message, MsgWithdrawDelegatorRewardResponse.encode);
}

export function decodeMsgWithdrawDelegatorRewardResponse(
  buffer: Uint8Array
): MsgWithdrawDelegatorRewardResponse {
  return Protobuf.decode<MsgWithdrawDelegatorRewardResponse>(
    buffer,
    MsgWithdrawDelegatorRewardResponse.decode
  );
}

export class MsgWithdrawValidatorCommission {
  static encode(message: MsgWithdrawValidatorCommission, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.validatorAddress);
  }

  static decode(reader: Reader, length: i32): MsgWithdrawValidatorCommission {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgWithdrawValidatorCommission();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.validatorAddress = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  validatorAddress: string;

  constructor(validatorAddress: string = "") {
    this.validatorAddress = validatorAddress;
  }
}

export function encodeMsgWithdrawValidatorCommission(
  message: MsgWithdrawValidatorCommission
): Uint8Array {
  return Protobuf.encode(message, MsgWithdrawValidatorCommission.encode);
}

export function decodeMsgWithdrawValidatorCommission(
  buffer: Uint8Array
): MsgWithdrawValidatorCommission {
  return Protobuf.decode<MsgWithdrawValidatorCommission>(
    buffer,
    MsgWithdrawValidatorCommission.decode
  );
}

@unmanaged
export class MsgWithdrawValidatorCommissionResponse {
  static encode(
    message: MsgWithdrawValidatorCommissionResponse,
    writer: Writer
  ): void {}

  static decode(
    reader: Reader,
    length: i32
  ): MsgWithdrawValidatorCommissionResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgWithdrawValidatorCommissionResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgWithdrawValidatorCommissionResponse(
  message: MsgWithdrawValidatorCommissionResponse
): Uint8Array {
  return Protobuf.encode(
    message,
    MsgWithdrawValidatorCommissionResponse.encode
  );
}

export function decodeMsgWithdrawValidatorCommissionResponse(
  buffer: Uint8Array
): MsgWithdrawValidatorCommissionResponse {
  return Protobuf.decode<MsgWithdrawValidatorCommissionResponse>(
    buffer,
    MsgWithdrawValidatorCommissionResponse.decode
  );
}

export class MsgFundCommunityPool {
  static encode(message: MsgFundCommunityPool, writer: Writer): void {
    const amount = message.amount;
    for (let i = 0; i < amount.length; ++i) {
      writer.uint32(10);
      writer.fork();
      base.v1beta1.Coin.encode(amount[i], writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.depositor);
  }

  static decode(reader: Reader, length: i32): MsgFundCommunityPool {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgFundCommunityPool();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.amount.push(
            base.v1beta1.Coin.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.depositor = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  amount: Array<base.v1beta1.Coin>;
  depositor: string;

  constructor(amount: Array<base.v1beta1.Coin> = [], depositor: string = "") {
    this.amount = amount;
    this.depositor = depositor;
  }
}

export function encodeMsgFundCommunityPool(
  message: MsgFundCommunityPool
): Uint8Array {
  return Protobuf.encode(message, MsgFundCommunityPool.encode);
}

export function decodeMsgFundCommunityPool(
  buffer: Uint8Array
): MsgFundCommunityPool {
  return Protobuf.decode<MsgFundCommunityPool>(
    buffer,
    MsgFundCommunityPool.decode
  );
}

@unmanaged
export class MsgFundCommunityPoolResponse {
  static encode(message: MsgFundCommunityPoolResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgFundCommunityPoolResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgFundCommunityPoolResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgFundCommunityPoolResponse(
  message: MsgFundCommunityPoolResponse
): Uint8Array {
  return Protobuf.encode(message, MsgFundCommunityPoolResponse.encode);
}

export function decodeMsgFundCommunityPoolResponse(
  buffer: Uint8Array
): MsgFundCommunityPoolResponse {
  return Protobuf.decode<MsgFundCommunityPoolResponse>(
    buffer,
    MsgFundCommunityPoolResponse.decode
  );
}
