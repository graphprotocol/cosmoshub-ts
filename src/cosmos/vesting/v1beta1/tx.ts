// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.6

import { Writer, Reader, Protobuf } from "as-proto";
import { base } from "../../base";

export class MsgCreateVestingAccount {
  static encode(message: MsgCreateVestingAccount, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.fromAddress);

    writer.uint32(18);
    writer.string(message.toAddress);

    const amount = message.amount;
    for (let i = 0; i < amount.length; ++i) {
      writer.uint32(26);
      writer.fork();
      base.v1beta1.Coin.encode(amount[i], writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.int64(message.endTime);

    writer.uint32(40);
    writer.bool(message.delayed);
  }

  static decode(reader: Reader, length: i32): MsgCreateVestingAccount {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgCreateVestingAccount();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.fromAddress = reader.string();
          break;

        case 2:
          message.toAddress = reader.string();
          break;

        case 3:
          message.amount.push(
            base.v1beta1.Coin.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.endTime = reader.int64();
          break;

        case 5:
          message.delayed = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  fromAddress: string;
  toAddress: string;
  amount: Array<base.v1beta1.Coin>;
  endTime: i64;
  delayed: bool;

  constructor(
    fromAddress: string = "",
    toAddress: string = "",
    amount: Array<base.v1beta1.Coin> = [],
    endTime: i64 = 0,
    delayed: bool = false
  ) {
    this.fromAddress = fromAddress;
    this.toAddress = toAddress;
    this.amount = amount;
    this.endTime = endTime;
    this.delayed = delayed;
  }
}

export function encodeMsgCreateVestingAccount(
  message: MsgCreateVestingAccount
): Uint8Array {
  return Protobuf.encode(message, MsgCreateVestingAccount.encode);
}

export function decodeMsgCreateVestingAccount(
  buffer: Uint8Array
): MsgCreateVestingAccount {
  return Protobuf.decode<MsgCreateVestingAccount>(
    buffer,
    MsgCreateVestingAccount.decode
  );
}

@unmanaged
export class MsgCreateVestingAccountResponse {
  static encode(
    message: MsgCreateVestingAccountResponse,
    writer: Writer
  ): void {}

  static decode(reader: Reader, length: i32): MsgCreateVestingAccountResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgCreateVestingAccountResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgCreateVestingAccountResponse(
  message: MsgCreateVestingAccountResponse
): Uint8Array {
  return Protobuf.encode(message, MsgCreateVestingAccountResponse.encode);
}

export function decodeMsgCreateVestingAccountResponse(
  buffer: Uint8Array
): MsgCreateVestingAccountResponse {
  return Protobuf.decode<MsgCreateVestingAccountResponse>(
    buffer,
    MsgCreateVestingAccountResponse.decode
  );
}
