// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.6

import { Writer, Reader, Protobuf } from "as-proto";
import { cosmos } from "../../../../cosmos";
import { core } from "../../../core";

export class MsgTransfer {
  static encode(message: MsgTransfer, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sourcePort);

    writer.uint32(18);
    writer.string(message.sourceChannel);

    const token = message.token;
    if (token !== null) {
      writer.uint32(26);
      writer.fork();
      cosmos.base.v1beta1.Coin.encode(token, writer);
      writer.ldelim();
    }

    writer.uint32(34);
    writer.string(message.sender);

    writer.uint32(42);
    writer.string(message.receiver);

    const timeoutHeight = message.timeoutHeight;
    if (timeoutHeight !== null) {
      writer.uint32(50);
      writer.fork();
      core.client.v1.Height.encode(timeoutHeight, writer);
      writer.ldelim();
    }

    writer.uint32(56);
    writer.uint64(message.timeoutTimestamp);
  }

  static decode(reader: Reader, length: i32): MsgTransfer {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgTransfer();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sourcePort = reader.string();
          break;

        case 2:
          message.sourceChannel = reader.string();
          break;

        case 3:
          message.token = cosmos.base.v1beta1.Coin.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.sender = reader.string();
          break;

        case 5:
          message.receiver = reader.string();
          break;

        case 6:
          message.timeoutHeight = core.client.v1.Height.decode(
            reader,
            reader.uint32()
          );
          break;

        case 7:
          message.timeoutTimestamp = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sourcePort: string;
  sourceChannel: string;
  token: cosmos.base.v1beta1.Coin | null;
  sender: string;
  receiver: string;
  timeoutHeight: core.client.v1.Height | null;
  timeoutTimestamp: u64;

  constructor(
    sourcePort: string = "",
    sourceChannel: string = "",
    token: cosmos.base.v1beta1.Coin | null = null,
    sender: string = "",
    receiver: string = "",
    timeoutHeight: core.client.v1.Height | null = null,
    timeoutTimestamp: u64 = 0
  ) {
    this.sourcePort = sourcePort;
    this.sourceChannel = sourceChannel;
    this.token = token;
    this.sender = sender;
    this.receiver = receiver;
    this.timeoutHeight = timeoutHeight;
    this.timeoutTimestamp = timeoutTimestamp;
  }
}

export function encodeMsgTransfer(message: MsgTransfer): Uint8Array {
  return Protobuf.encode(message, MsgTransfer.encode);
}

export function decodeMsgTransfer(buffer: Uint8Array): MsgTransfer {
  return Protobuf.decode<MsgTransfer>(buffer, MsgTransfer.decode);
}

@unmanaged
export class MsgTransferResponse {
  static encode(message: MsgTransferResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgTransferResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgTransferResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgTransferResponse(
  message: MsgTransferResponse
): Uint8Array {
  return Protobuf.encode(message, MsgTransferResponse.encode);
}

export function decodeMsgTransferResponse(
  buffer: Uint8Array
): MsgTransferResponse {
  return Protobuf.decode<MsgTransferResponse>(
    buffer,
    MsgTransferResponse.decode
  );
}
