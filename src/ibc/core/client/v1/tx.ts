// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.6

import { Writer, Reader, Protobuf } from "as-proto";
import { google } from "../../../../google";

export class MsgCreateClient {
  static encode(message: MsgCreateClient, writer: Writer): void {
    const clientState = message.clientState;
    if (clientState !== null) {
      writer.uint32(10);
      writer.fork();
      google.protobuf.Any.encode(clientState, writer);
      writer.ldelim();
    }

    const consensusState = message.consensusState;
    if (consensusState !== null) {
      writer.uint32(18);
      writer.fork();
      google.protobuf.Any.encode(consensusState, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgCreateClient {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgCreateClient();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientState = google.protobuf.Any.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.consensusState = google.protobuf.Any.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientState: google.protobuf.Any | null;
  consensusState: google.protobuf.Any | null;
  signer: string;

  constructor(
    clientState: google.protobuf.Any | null = null,
    consensusState: google.protobuf.Any | null = null,
    signer: string = ""
  ) {
    this.clientState = clientState;
    this.consensusState = consensusState;
    this.signer = signer;
  }
}

export function encodeMsgCreateClient(message: MsgCreateClient): Uint8Array {
  return Protobuf.encode(message, MsgCreateClient.encode);
}

export function decodeMsgCreateClient(buffer: Uint8Array): MsgCreateClient {
  return Protobuf.decode<MsgCreateClient>(buffer, MsgCreateClient.decode);
}

@unmanaged
export class MsgCreateClientResponse {
  static encode(message: MsgCreateClientResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgCreateClientResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgCreateClientResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgCreateClientResponse(
  message: MsgCreateClientResponse
): Uint8Array {
  return Protobuf.encode(message, MsgCreateClientResponse.encode);
}

export function decodeMsgCreateClientResponse(
  buffer: Uint8Array
): MsgCreateClientResponse {
  return Protobuf.decode<MsgCreateClientResponse>(
    buffer,
    MsgCreateClientResponse.decode
  );
}

export class MsgUpdateClient {
  static encode(message: MsgUpdateClient, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.clientId);

    const header = message.header;
    if (header !== null) {
      writer.uint32(18);
      writer.fork();
      google.protobuf.Any.encode(header, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgUpdateClient {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgUpdateClient();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = reader.string();
          break;

        case 2:
          message.header = google.protobuf.Any.decode(reader, reader.uint32());
          break;

        case 3:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientId: string;
  header: google.protobuf.Any | null;
  signer: string;

  constructor(
    clientId: string = "",
    header: google.protobuf.Any | null = null,
    signer: string = ""
  ) {
    this.clientId = clientId;
    this.header = header;
    this.signer = signer;
  }
}

export function encodeMsgUpdateClient(message: MsgUpdateClient): Uint8Array {
  return Protobuf.encode(message, MsgUpdateClient.encode);
}

export function decodeMsgUpdateClient(buffer: Uint8Array): MsgUpdateClient {
  return Protobuf.decode<MsgUpdateClient>(buffer, MsgUpdateClient.decode);
}

@unmanaged
export class MsgUpdateClientResponse {
  static encode(message: MsgUpdateClientResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgUpdateClientResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgUpdateClientResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgUpdateClientResponse(
  message: MsgUpdateClientResponse
): Uint8Array {
  return Protobuf.encode(message, MsgUpdateClientResponse.encode);
}

export function decodeMsgUpdateClientResponse(
  buffer: Uint8Array
): MsgUpdateClientResponse {
  return Protobuf.decode<MsgUpdateClientResponse>(
    buffer,
    MsgUpdateClientResponse.decode
  );
}

export class MsgUpgradeClient {
  static encode(message: MsgUpgradeClient, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.clientId);

    const clientState = message.clientState;
    if (clientState !== null) {
      writer.uint32(18);
      writer.fork();
      google.protobuf.Any.encode(clientState, writer);
      writer.ldelim();
    }

    const consensusState = message.consensusState;
    if (consensusState !== null) {
      writer.uint32(26);
      writer.fork();
      google.protobuf.Any.encode(consensusState, writer);
      writer.ldelim();
    }

    writer.uint32(34);
    writer.bytes(message.proofUpgradeClient);

    writer.uint32(42);
    writer.bytes(message.proofUpgradeConsensusState);

    writer.uint32(50);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgUpgradeClient {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgUpgradeClient();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = reader.string();
          break;

        case 2:
          message.clientState = google.protobuf.Any.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.consensusState = google.protobuf.Any.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.proofUpgradeClient = reader.bytes();
          break;

        case 5:
          message.proofUpgradeConsensusState = reader.bytes();
          break;

        case 6:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientId: string;
  clientState: google.protobuf.Any | null;
  consensusState: google.protobuf.Any | null;
  proofUpgradeClient: Uint8Array;
  proofUpgradeConsensusState: Uint8Array;
  signer: string;

  constructor(
    clientId: string = "",
    clientState: google.protobuf.Any | null = null,
    consensusState: google.protobuf.Any | null = null,
    proofUpgradeClient: Uint8Array = new Uint8Array(0),
    proofUpgradeConsensusState: Uint8Array = new Uint8Array(0),
    signer: string = ""
  ) {
    this.clientId = clientId;
    this.clientState = clientState;
    this.consensusState = consensusState;
    this.proofUpgradeClient = proofUpgradeClient;
    this.proofUpgradeConsensusState = proofUpgradeConsensusState;
    this.signer = signer;
  }
}

export function encodeMsgUpgradeClient(message: MsgUpgradeClient): Uint8Array {
  return Protobuf.encode(message, MsgUpgradeClient.encode);
}

export function decodeMsgUpgradeClient(buffer: Uint8Array): MsgUpgradeClient {
  return Protobuf.decode<MsgUpgradeClient>(buffer, MsgUpgradeClient.decode);
}

@unmanaged
export class MsgUpgradeClientResponse {
  static encode(message: MsgUpgradeClientResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgUpgradeClientResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgUpgradeClientResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgUpgradeClientResponse(
  message: MsgUpgradeClientResponse
): Uint8Array {
  return Protobuf.encode(message, MsgUpgradeClientResponse.encode);
}

export function decodeMsgUpgradeClientResponse(
  buffer: Uint8Array
): MsgUpgradeClientResponse {
  return Protobuf.decode<MsgUpgradeClientResponse>(
    buffer,
    MsgUpgradeClientResponse.decode
  );
}

export class MsgSubmitMisbehaviour {
  static encode(message: MsgSubmitMisbehaviour, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.clientId);

    const misbehaviour = message.misbehaviour;
    if (misbehaviour !== null) {
      writer.uint32(18);
      writer.fork();
      google.protobuf.Any.encode(misbehaviour, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgSubmitMisbehaviour {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSubmitMisbehaviour();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = reader.string();
          break;

        case 2:
          message.misbehaviour = google.protobuf.Any.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientId: string;
  misbehaviour: google.protobuf.Any | null;
  signer: string;

  constructor(
    clientId: string = "",
    misbehaviour: google.protobuf.Any | null = null,
    signer: string = ""
  ) {
    this.clientId = clientId;
    this.misbehaviour = misbehaviour;
    this.signer = signer;
  }
}

export function encodeMsgSubmitMisbehaviour(
  message: MsgSubmitMisbehaviour
): Uint8Array {
  return Protobuf.encode(message, MsgSubmitMisbehaviour.encode);
}

export function decodeMsgSubmitMisbehaviour(
  buffer: Uint8Array
): MsgSubmitMisbehaviour {
  return Protobuf.decode<MsgSubmitMisbehaviour>(
    buffer,
    MsgSubmitMisbehaviour.decode
  );
}

@unmanaged
export class MsgSubmitMisbehaviourResponse {
  static encode(message: MsgSubmitMisbehaviourResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgSubmitMisbehaviourResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSubmitMisbehaviourResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgSubmitMisbehaviourResponse(
  message: MsgSubmitMisbehaviourResponse
): Uint8Array {
  return Protobuf.encode(message, MsgSubmitMisbehaviourResponse.encode);
}

export function decodeMsgSubmitMisbehaviourResponse(
  buffer: Uint8Array
): MsgSubmitMisbehaviourResponse {
  return Protobuf.decode<MsgSubmitMisbehaviourResponse>(
    buffer,
    MsgSubmitMisbehaviourResponse.decode
  );
}
