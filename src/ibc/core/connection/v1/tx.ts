// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.6

import { Writer, Reader, Protobuf } from "as-proto";
import { Counterparty, Version } from "./connection";
import { google } from "../../../../google";
import { client } from "../../client";

export class MsgConnectionOpenInit {
  static encode(message: MsgConnectionOpenInit, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.clientId);

    const counterparty = message.counterparty;
    if (counterparty !== null) {
      writer.uint32(18);
      writer.fork();
      Counterparty.encode(counterparty, writer);
      writer.ldelim();
    }

    const version = message.version;
    if (version !== null) {
      writer.uint32(26);
      writer.fork();
      Version.encode(version, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.uint64(message.delayPeriod);

    writer.uint32(42);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgConnectionOpenInit {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgConnectionOpenInit();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = reader.string();
          break;

        case 2:
          message.counterparty = Counterparty.decode(reader, reader.uint32());
          break;

        case 3:
          message.version = Version.decode(reader, reader.uint32());
          break;

        case 4:
          message.delayPeriod = reader.uint64();
          break;

        case 5:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientId: string;
  counterparty: Counterparty | null;
  version: Version | null;
  delayPeriod: u64;
  signer: string;

  constructor(
    clientId: string = "",
    counterparty: Counterparty | null = null,
    version: Version | null = null,
    delayPeriod: u64 = 0,
    signer: string = ""
  ) {
    this.clientId = clientId;
    this.counterparty = counterparty;
    this.version = version;
    this.delayPeriod = delayPeriod;
    this.signer = signer;
  }
}

export function encodeMsgConnectionOpenInit(
  message: MsgConnectionOpenInit
): Uint8Array {
  return Protobuf.encode(message, MsgConnectionOpenInit.encode);
}

export function decodeMsgConnectionOpenInit(
  buffer: Uint8Array
): MsgConnectionOpenInit {
  return Protobuf.decode<MsgConnectionOpenInit>(
    buffer,
    MsgConnectionOpenInit.decode
  );
}

@unmanaged
export class MsgConnectionOpenInitResponse {
  static encode(message: MsgConnectionOpenInitResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgConnectionOpenInitResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgConnectionOpenInitResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgConnectionOpenInitResponse(
  message: MsgConnectionOpenInitResponse
): Uint8Array {
  return Protobuf.encode(message, MsgConnectionOpenInitResponse.encode);
}

export function decodeMsgConnectionOpenInitResponse(
  buffer: Uint8Array
): MsgConnectionOpenInitResponse {
  return Protobuf.decode<MsgConnectionOpenInitResponse>(
    buffer,
    MsgConnectionOpenInitResponse.decode
  );
}

export class MsgConnectionOpenTry {
  static encode(message: MsgConnectionOpenTry, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.clientId);

    writer.uint32(18);
    writer.string(message.previousConnectionId);

    const clientState = message.clientState;
    if (clientState !== null) {
      writer.uint32(26);
      writer.fork();
      google.protobuf.Any.encode(clientState, writer);
      writer.ldelim();
    }

    const counterparty = message.counterparty;
    if (counterparty !== null) {
      writer.uint32(34);
      writer.fork();
      Counterparty.encode(counterparty, writer);
      writer.ldelim();
    }

    writer.uint32(40);
    writer.uint64(message.delayPeriod);

    const counterpartyVersions = message.counterpartyVersions;
    for (let i = 0; i < counterpartyVersions.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Version.encode(counterpartyVersions[i], writer);
      writer.ldelim();
    }

    const proofHeight = message.proofHeight;
    if (proofHeight !== null) {
      writer.uint32(58);
      writer.fork();
      client.v1.Height.encode(proofHeight, writer);
      writer.ldelim();
    }

    writer.uint32(66);
    writer.bytes(message.proofInit);

    writer.uint32(74);
    writer.bytes(message.proofClient);

    writer.uint32(82);
    writer.bytes(message.proofConsensus);

    const consensusHeight = message.consensusHeight;
    if (consensusHeight !== null) {
      writer.uint32(90);
      writer.fork();
      client.v1.Height.encode(consensusHeight, writer);
      writer.ldelim();
    }

    writer.uint32(98);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgConnectionOpenTry {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgConnectionOpenTry();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = reader.string();
          break;

        case 2:
          message.previousConnectionId = reader.string();
          break;

        case 3:
          message.clientState = google.protobuf.Any.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.counterparty = Counterparty.decode(reader, reader.uint32());
          break;

        case 5:
          message.delayPeriod = reader.uint64();
          break;

        case 6:
          message.counterpartyVersions.push(
            Version.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.proofHeight = client.v1.Height.decode(
            reader,
            reader.uint32()
          );
          break;

        case 8:
          message.proofInit = reader.bytes();
          break;

        case 9:
          message.proofClient = reader.bytes();
          break;

        case 10:
          message.proofConsensus = reader.bytes();
          break;

        case 11:
          message.consensusHeight = client.v1.Height.decode(
            reader,
            reader.uint32()
          );
          break;

        case 12:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientId: string;
  previousConnectionId: string;
  clientState: google.protobuf.Any | null;
  counterparty: Counterparty | null;
  delayPeriod: u64;
  counterpartyVersions: Array<Version>;
  proofHeight: client.v1.Height | null;
  proofInit: Uint8Array;
  proofClient: Uint8Array;
  proofConsensus: Uint8Array;
  consensusHeight: client.v1.Height | null;
  signer: string;

  constructor(
    clientId: string = "",
    previousConnectionId: string = "",
    clientState: google.protobuf.Any | null = null,
    counterparty: Counterparty | null = null,
    delayPeriod: u64 = 0,
    counterpartyVersions: Array<Version> = [],
    proofHeight: client.v1.Height | null = null,
    proofInit: Uint8Array = new Uint8Array(0),
    proofClient: Uint8Array = new Uint8Array(0),
    proofConsensus: Uint8Array = new Uint8Array(0),
    consensusHeight: client.v1.Height | null = null,
    signer: string = ""
  ) {
    this.clientId = clientId;
    this.previousConnectionId = previousConnectionId;
    this.clientState = clientState;
    this.counterparty = counterparty;
    this.delayPeriod = delayPeriod;
    this.counterpartyVersions = counterpartyVersions;
    this.proofHeight = proofHeight;
    this.proofInit = proofInit;
    this.proofClient = proofClient;
    this.proofConsensus = proofConsensus;
    this.consensusHeight = consensusHeight;
    this.signer = signer;
  }
}

export function encodeMsgConnectionOpenTry(
  message: MsgConnectionOpenTry
): Uint8Array {
  return Protobuf.encode(message, MsgConnectionOpenTry.encode);
}

export function decodeMsgConnectionOpenTry(
  buffer: Uint8Array
): MsgConnectionOpenTry {
  return Protobuf.decode<MsgConnectionOpenTry>(
    buffer,
    MsgConnectionOpenTry.decode
  );
}

@unmanaged
export class MsgConnectionOpenTryResponse {
  static encode(message: MsgConnectionOpenTryResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgConnectionOpenTryResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgConnectionOpenTryResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgConnectionOpenTryResponse(
  message: MsgConnectionOpenTryResponse
): Uint8Array {
  return Protobuf.encode(message, MsgConnectionOpenTryResponse.encode);
}

export function decodeMsgConnectionOpenTryResponse(
  buffer: Uint8Array
): MsgConnectionOpenTryResponse {
  return Protobuf.decode<MsgConnectionOpenTryResponse>(
    buffer,
    MsgConnectionOpenTryResponse.decode
  );
}

export class MsgConnectionOpenAck {
  static encode(message: MsgConnectionOpenAck, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.connectionId);

    writer.uint32(18);
    writer.string(message.counterpartyConnectionId);

    const version = message.version;
    if (version !== null) {
      writer.uint32(26);
      writer.fork();
      Version.encode(version, writer);
      writer.ldelim();
    }

    const clientState = message.clientState;
    if (clientState !== null) {
      writer.uint32(34);
      writer.fork();
      google.protobuf.Any.encode(clientState, writer);
      writer.ldelim();
    }

    const proofHeight = message.proofHeight;
    if (proofHeight !== null) {
      writer.uint32(42);
      writer.fork();
      client.v1.Height.encode(proofHeight, writer);
      writer.ldelim();
    }

    writer.uint32(50);
    writer.bytes(message.proofTry);

    writer.uint32(58);
    writer.bytes(message.proofClient);

    writer.uint32(66);
    writer.bytes(message.proofConsensus);

    const consensusHeight = message.consensusHeight;
    if (consensusHeight !== null) {
      writer.uint32(74);
      writer.fork();
      client.v1.Height.encode(consensusHeight, writer);
      writer.ldelim();
    }

    writer.uint32(82);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgConnectionOpenAck {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgConnectionOpenAck();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.connectionId = reader.string();
          break;

        case 2:
          message.counterpartyConnectionId = reader.string();
          break;

        case 3:
          message.version = Version.decode(reader, reader.uint32());
          break;

        case 4:
          message.clientState = google.protobuf.Any.decode(
            reader,
            reader.uint32()
          );
          break;

        case 5:
          message.proofHeight = client.v1.Height.decode(
            reader,
            reader.uint32()
          );
          break;

        case 6:
          message.proofTry = reader.bytes();
          break;

        case 7:
          message.proofClient = reader.bytes();
          break;

        case 8:
          message.proofConsensus = reader.bytes();
          break;

        case 9:
          message.consensusHeight = client.v1.Height.decode(
            reader,
            reader.uint32()
          );
          break;

        case 10:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  connectionId: string;
  counterpartyConnectionId: string;
  version: Version | null;
  clientState: google.protobuf.Any | null;
  proofHeight: client.v1.Height | null;
  proofTry: Uint8Array;
  proofClient: Uint8Array;
  proofConsensus: Uint8Array;
  consensusHeight: client.v1.Height | null;
  signer: string;

  constructor(
    connectionId: string = "",
    counterpartyConnectionId: string = "",
    version: Version | null = null,
    clientState: google.protobuf.Any | null = null,
    proofHeight: client.v1.Height | null = null,
    proofTry: Uint8Array = new Uint8Array(0),
    proofClient: Uint8Array = new Uint8Array(0),
    proofConsensus: Uint8Array = new Uint8Array(0),
    consensusHeight: client.v1.Height | null = null,
    signer: string = ""
  ) {
    this.connectionId = connectionId;
    this.counterpartyConnectionId = counterpartyConnectionId;
    this.version = version;
    this.clientState = clientState;
    this.proofHeight = proofHeight;
    this.proofTry = proofTry;
    this.proofClient = proofClient;
    this.proofConsensus = proofConsensus;
    this.consensusHeight = consensusHeight;
    this.signer = signer;
  }
}

export function encodeMsgConnectionOpenAck(
  message: MsgConnectionOpenAck
): Uint8Array {
  return Protobuf.encode(message, MsgConnectionOpenAck.encode);
}

export function decodeMsgConnectionOpenAck(
  buffer: Uint8Array
): MsgConnectionOpenAck {
  return Protobuf.decode<MsgConnectionOpenAck>(
    buffer,
    MsgConnectionOpenAck.decode
  );
}

@unmanaged
export class MsgConnectionOpenAckResponse {
  static encode(message: MsgConnectionOpenAckResponse, writer: Writer): void {}

  static decode(reader: Reader, length: i32): MsgConnectionOpenAckResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgConnectionOpenAckResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgConnectionOpenAckResponse(
  message: MsgConnectionOpenAckResponse
): Uint8Array {
  return Protobuf.encode(message, MsgConnectionOpenAckResponse.encode);
}

export function decodeMsgConnectionOpenAckResponse(
  buffer: Uint8Array
): MsgConnectionOpenAckResponse {
  return Protobuf.decode<MsgConnectionOpenAckResponse>(
    buffer,
    MsgConnectionOpenAckResponse.decode
  );
}

export class MsgConnectionOpenConfirm {
  static encode(message: MsgConnectionOpenConfirm, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.connectionId);

    writer.uint32(18);
    writer.bytes(message.proofAck);

    const proofHeight = message.proofHeight;
    if (proofHeight !== null) {
      writer.uint32(26);
      writer.fork();
      client.v1.Height.encode(proofHeight, writer);
      writer.ldelim();
    }

    writer.uint32(34);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgConnectionOpenConfirm {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgConnectionOpenConfirm();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.connectionId = reader.string();
          break;

        case 2:
          message.proofAck = reader.bytes();
          break;

        case 3:
          message.proofHeight = client.v1.Height.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  connectionId: string;
  proofAck: Uint8Array;
  proofHeight: client.v1.Height | null;
  signer: string;

  constructor(
    connectionId: string = "",
    proofAck: Uint8Array = new Uint8Array(0),
    proofHeight: client.v1.Height | null = null,
    signer: string = ""
  ) {
    this.connectionId = connectionId;
    this.proofAck = proofAck;
    this.proofHeight = proofHeight;
    this.signer = signer;
  }
}

export function encodeMsgConnectionOpenConfirm(
  message: MsgConnectionOpenConfirm
): Uint8Array {
  return Protobuf.encode(message, MsgConnectionOpenConfirm.encode);
}

export function decodeMsgConnectionOpenConfirm(
  buffer: Uint8Array
): MsgConnectionOpenConfirm {
  return Protobuf.decode<MsgConnectionOpenConfirm>(
    buffer,
    MsgConnectionOpenConfirm.decode
  );
}

@unmanaged
export class MsgConnectionOpenConfirmResponse {
  static encode(
    message: MsgConnectionOpenConfirmResponse,
    writer: Writer
  ): void {}

  static decode(reader: Reader, length: i32): MsgConnectionOpenConfirmResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgConnectionOpenConfirmResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  constructor() {}
}

export function encodeMsgConnectionOpenConfirmResponse(
  message: MsgConnectionOpenConfirmResponse
): Uint8Array {
  return Protobuf.encode(message, MsgConnectionOpenConfirmResponse.encode);
}

export function decodeMsgConnectionOpenConfirmResponse(
  buffer: Uint8Array
): MsgConnectionOpenConfirmResponse {
  return Protobuf.decode<MsgConnectionOpenConfirmResponse>(
    buffer,
    MsgConnectionOpenConfirmResponse.decode
  );
}
