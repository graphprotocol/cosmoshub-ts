// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.7

import { Writer, Reader, Protobuf } from "as-proto";
import { ics23 } from "../../../../confio";

export class MerkleRoot {
  static encode(message: MerkleRoot, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.hash);
  }

  static decode(reader: Reader, length: i32): MerkleRoot {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MerkleRoot();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hash = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  hash: Uint8Array;

  constructor(hash: Uint8Array = new Uint8Array(0)) {
    this.hash = hash;
  }
}

export function encodeMerkleRoot(message: MerkleRoot): Uint8Array {
  return Protobuf.encode(message, MerkleRoot.encode);
}

export function decodeMerkleRoot(buffer: Uint8Array): MerkleRoot {
  return Protobuf.decode<MerkleRoot>(buffer, MerkleRoot.decode);
}

export class MerklePrefix {
  static encode(message: MerklePrefix, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.keyPrefix);
  }

  static decode(reader: Reader, length: i32): MerklePrefix {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MerklePrefix();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.keyPrefix = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  keyPrefix: Uint8Array;

  constructor(keyPrefix: Uint8Array = new Uint8Array(0)) {
    this.keyPrefix = keyPrefix;
  }
}

export function encodeMerklePrefix(message: MerklePrefix): Uint8Array {
  return Protobuf.encode(message, MerklePrefix.encode);
}

export function decodeMerklePrefix(buffer: Uint8Array): MerklePrefix {
  return Protobuf.decode<MerklePrefix>(buffer, MerklePrefix.decode);
}

export class MerklePath {
  static encode(message: MerklePath, writer: Writer): void {
    const keyPath = message.keyPath;
    if (keyPath.length !== 0) {
      for (let i = 0; i < keyPath.length; ++i) {
        writer.uint32(10);
        writer.string(keyPath[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): MerklePath {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MerklePath();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.keyPath.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  keyPath: Array<string>;

  constructor(keyPath: Array<string> = []) {
    this.keyPath = keyPath;
  }
}

export function encodeMerklePath(message: MerklePath): Uint8Array {
  return Protobuf.encode(message, MerklePath.encode);
}

export function decodeMerklePath(buffer: Uint8Array): MerklePath {
  return Protobuf.decode<MerklePath>(buffer, MerklePath.decode);
}

export class MerkleProof {
  static encode(message: MerkleProof, writer: Writer): void {
    const proofs = message.proofs;
    for (let i = 0; i < proofs.length; ++i) {
      writer.uint32(10);
      writer.fork();
      ics23.CommitmentProof.encode(proofs[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MerkleProof {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MerkleProof();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.proofs.push(
            ics23.CommitmentProof.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  proofs: Array<ics23.CommitmentProof>;

  constructor(proofs: Array<ics23.CommitmentProof> = []) {
    this.proofs = proofs;
  }
}

export function encodeMerkleProof(message: MerkleProof): Uint8Array {
  return Protobuf.encode(message, MerkleProof.encode);
}

export function decodeMerkleProof(buffer: Uint8Array): MerkleProof {
  return Protobuf.decode<MerkleProof>(buffer, MerkleProof.decode);
}
