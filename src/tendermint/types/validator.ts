// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v0.4.0
//   protoc        v3.21.7

import { Writer, Reader, Protobuf } from "as-proto";
import { crypto } from "../crypto";

export class ValidatorSet {
  static encode(message: ValidatorSet, writer: Writer): void {
    const validators = message.validators;
    for (let i = 0; i < validators.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Validator.encode(validators[i], writer);
      writer.ldelim();
    }

    const proposer = message.proposer;
    if (proposer !== null) {
      writer.uint32(18);
      writer.fork();
      Validator.encode(proposer, writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.int64(message.totalVotingPower);
  }

  static decode(reader: Reader, length: i32): ValidatorSet {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ValidatorSet();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.validators.push(Validator.decode(reader, reader.uint32()));
          break;

        case 2:
          message.proposer = Validator.decode(reader, reader.uint32());
          break;

        case 3:
          message.totalVotingPower = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  validators: Array<Validator>;
  proposer: Validator | null;
  totalVotingPower: i64;

  constructor(
    validators: Array<Validator> = [],
    proposer: Validator | null = null,
    totalVotingPower: i64 = 0
  ) {
    this.validators = validators;
    this.proposer = proposer;
    this.totalVotingPower = totalVotingPower;
  }
}

export function encodeValidatorSet(message: ValidatorSet): Uint8Array {
  return Protobuf.encode(message, ValidatorSet.encode);
}

export function decodeValidatorSet(buffer: Uint8Array): ValidatorSet {
  return Protobuf.decode<ValidatorSet>(buffer, ValidatorSet.decode);
}

export class Validator {
  static encode(message: Validator, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.address);

    const pubKey = message.pubKey;
    if (pubKey !== null) {
      writer.uint32(18);
      writer.fork();
      crypto.PublicKey.encode(pubKey, writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.int64(message.votingPower);

    writer.uint32(32);
    writer.int64(message.proposerPriority);
  }

  static decode(reader: Reader, length: i32): Validator {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Validator();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.bytes();
          break;

        case 2:
          message.pubKey = crypto.PublicKey.decode(reader, reader.uint32());
          break;

        case 3:
          message.votingPower = reader.int64();
          break;

        case 4:
          message.proposerPriority = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  address: Uint8Array;
  pubKey: crypto.PublicKey | null;
  votingPower: i64;
  proposerPriority: i64;

  constructor(
    address: Uint8Array = new Uint8Array(0),
    pubKey: crypto.PublicKey | null = null,
    votingPower: i64 = 0,
    proposerPriority: i64 = 0
  ) {
    this.address = address;
    this.pubKey = pubKey;
    this.votingPower = votingPower;
    this.proposerPriority = proposerPriority;
  }
}

export function encodeValidator(message: Validator): Uint8Array {
  return Protobuf.encode(message, Validator.encode);
}

export function decodeValidator(buffer: Uint8Array): Validator {
  return Protobuf.decode<Validator>(buffer, Validator.decode);
}

export class SimpleValidator {
  static encode(message: SimpleValidator, writer: Writer): void {
    const pubKey = message.pubKey;
    if (pubKey !== null) {
      writer.uint32(10);
      writer.fork();
      crypto.PublicKey.encode(pubKey, writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.int64(message.votingPower);
  }

  static decode(reader: Reader, length: i32): SimpleValidator {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SimpleValidator();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pubKey = crypto.PublicKey.decode(reader, reader.uint32());
          break;

        case 2:
          message.votingPower = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  pubKey: crypto.PublicKey | null;
  votingPower: i64;

  constructor(pubKey: crypto.PublicKey | null = null, votingPower: i64 = 0) {
    this.pubKey = pubKey;
    this.votingPower = votingPower;
  }
}

export function encodeSimpleValidator(message: SimpleValidator): Uint8Array {
  return Protobuf.encode(message, SimpleValidator.encode);
}

export function decodeSimpleValidator(buffer: Uint8Array): SimpleValidator {
  return Protobuf.decode<SimpleValidator>(buffer, SimpleValidator.decode);
}
